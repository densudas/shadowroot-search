/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/current/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'idea'
}

group 'io.github.densudas'
version '0.0.1'

repositories {
    mavenCentral()
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.github.densudas'
            artifactId = 'shadowroot-search'
            version = "0.0.1"
            from components.java

            pom {
                name = 'ShadowRoot search'
                description = 'shadowroot-search searches through all nested Shadow DOM roots using Java Selenium'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = "densudas"
                        name = "Denis Sudas"
                        email = "dvsudas@gmail.com"
                    }
                }
            }
        }
    }
//    repositories {
//        maven {
//            // change URLs to point to your repos, e.g. http://my.org/repo
//            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
//            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
//            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//        }
//    }
}

javadoc {
    include('lib')
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    // https://mvnrepository.com/artifact/org.apache.commons/commons-math3
    api group: 'org.apache.commons', name: 'commons-math3', version: '3.6.+'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation group: 'com.google.guava', name: 'guava', version: '30.1.1-jre'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.+'

    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
    testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.7.+'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // https://mvnrepository.com/artifact/org.junit.vintage/junit-vintage-engine
    testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.7.+'

    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-api
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-api', version: '3.+'

    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-server
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-server', version: '3.+'

    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.+'

    // https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: 'latest.release'
}

tasks.test {
    useJUnitPlatform()
    systemProperties["junit.jupiter.execution.parallel.enabled"] = true
    systemProperties["junit.jupiter.execution.parallel.mode.default"] = "concurrent"
    maxParallelForks = Runtime.getRuntime().availableProcessors()
}
